#!groovy

// Automatic deployment triggered by code updates
//   - Runs update build reference then starts deployment
//   - This job should be called from code build Jenkins jobs which supply the paramters
//   - Because of this we don't populate the DDEPLOYMENT_UNITS list
//   - If you are deploying across multiple segments you could make SEGMENT a param

pipeline {
    agent {
        label '<Hamlet label>'
    }

    options {
        timestamps ()
        buildDiscarder(
            logRotator(
                daysToKeepStr: '14'
            )
        )
        durabilityHint('PERFORMANCE_OPTIMIZED')
        parallelsAlwaysFailFast()
        checkoutToSubdirectory '.hamlet/product/'
    }

    parameters {
        string(
            name: 'DEPLOYMENT_UNITS',
            defaultValue: '',
            description: 'The git commit to use for the deployment update'
        )
        string(
            name: 'GIT_COMMIT',
            defaultValue: '',
            description: 'The git commit to use for the deployment update'
        )
        string(
            name: 'IMAGE_FORMATS',
            defaultValue: '',
            description: 'The image format of the deployment units'
        )
        booleanParam(
            name: 'TREAT_RUN_ID_DIFFERENCES_AS_SIGNIFICANT',
            defaultValue: false
        )
    }

    environment {
        properties_file = '.hamlet/product/<PRODUCT PROPERTIES FILE LOCATION>'
        slack_channel = '#<slack channel>'

        PRODUCT_INFRASTRUCTURE_REFERENCE = 'master'
        PRODUCT_CONFIG_REFERENCE = 'master'

        MODE = 'update'
        ENVIRONMENT = '<ENVIRONMENT>'
        SEGMENT = '<SEGMENT>'
        AUTODEPLOY = 'true'
    }

    stages {
        stage('Setup Context') {
            steps {

                // Load in Properties files
                script {
                    def productProperties = readProperties interpolate: true, file: "${env.properties_file}";
                    productProperties.each{ k, v -> env["${k}"] ="${v}" }

                }

                sh '''#!/bin/bash
                    ${AUTOMATION_BASE_DIR}/setContext.sh
                '''

                script {
                    def contextProperties = readProperties interpolate: true, file: "${WORKSPACE}/context.properties";
                    contextProperties.each{ k, v -> env["${k}"] ="${v}" }
                }

                sh '''#!/bin/bash
                    ${AUTOMATION_DIR}/constructTree.sh
                '''

                script {
                    def contextProperties = readProperties interpolate: true, file: "${WORKSPACE}/context.properties";
                    contextProperties.each{ k, v -> env["${k}"] ="${v}" }
                }
            }
        }

        stage('Update Build Refs') {
            when{
                allOf {
                    not {
                        equals expected: '', actual: "${params.DEPLOYMENT_UNITS}"
                    }
                    not {
                        equals expected: '', actual: "${params.GIT_COMMIT}"
                    }
                    not {
                        equals expected: '', actual: "${params.IMAGE_FORMATS}"
                    }
                }
            }

            environment {
                GIT_COMMIT = "${params.GIT_COMMIT}"
            }

            steps {
                sh '''#!/bin/bash
                    ${AUTOMATION_DIR}/validateUpdateBuildReferencesParameters.sh
                '''

                script {
                    def contextProperties = readProperties interpolate: true, file: "${WORKSPACE}/context.properties";
                    contextProperties.each{ k, v -> env["${k}"] ="${v}" }
                }

                sh '''#!/bin/bash
                    ${AUTOMATION_DIR}/confirmBuilds.sh
                '''

                script {
                    def contextProperties = readProperties interpolate: true, file: "${WORKSPACE}/context.properties";
                    contextProperties.each{ k, v -> env["${k}"] ="${v}" }
                }

                sh '''#!/bin/bash
                    ${AUTOMATION_DIR}/updateBuildReferences.sh
                '''
            }
        }

        stage('Deploy') {
            when {
                not {
                    equals expected: '', actual: "${params.DEPLOYMENT_UNITS}"
                }
            }

            steps {
                sh '''#!/bin/bash
                    ${AUTOMATION_DIR}/deploySetup.sh
                '''

                script {
                    def contextProperties = readProperties interpolate: true, file: "${WORKSPACE}/context.properties";
                    contextProperties.each{ k, v -> env["${k}"] ="${v}" }
                }

                sh '''#!/bin/bash
                    ${AUTOMATION_DIR}/deploy.sh
                '''
            }

            post {
                success {
                    slackSend (
                        message: "Deploy Completed - ${BUILD_DISPLAY_NAME} (<${BUILD_URL}|Open>)\n Environment: ${env.ENVIRONMENT} - Segment: ${env.SEGMENT} \n DeploymentUnits: ${params.DEPLOYMENT_UNITS} - Commit: ${params.GIT_COMMIT}",
                        channel: "${env["slack_channel"]}",
                        color: "#50C878"
                    )
                }

                failure {
                    slackSend (
                        message: "Deploy Failed - ${BUILD_DISPLAY_NAME} (<${BUILD_URL}|Open>)\n Environment: ${env.ENVIRONMENT} - Segment: ${env.SEGMENT} \n DeploymentUnits: ${params.DEPLOYMENT_UNITS} - Commit: ${params.GIT_COMMIT}",
                        channel: "${env["slack_channel"]}",
                        color: "#B22222"
                    )
                }
            }
        }
    }

}
